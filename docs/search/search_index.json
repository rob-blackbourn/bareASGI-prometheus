{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome \u00b6 Prometheus metrics for bareASGI","title":"Welcome"},{"location":"#welcome","text":"Prometheus metrics for bareASGI","title":"Welcome"},{"location":"api/bareasgi_prometheus/","text":"module bareasgi_prometheus \u00b6 Summary \u00b6 bareASGI prometheus middleware Description \u00b6 Provides metrics for requests to a bareASGI web service. function bareasgi_prometheus . add_prometheus_middleware \u00b6 Summary \u00b6 Adds prometheus middleware as the first middleware. bareasgi_prometheus . add_prometheus_middleware ( app : Application , * , metric_type : Optional[Type[HttpRequestMetric]] , host : Optional[str] , app_name : Optional[str] , metrics_path : Optional[str] ) -> Application Parameters \u00b6 app : Application The ASGI application metric_type : Optional[Type[HttpRequestMetric]] (optional) An optional custom request monitor. Defaults to None. host : Optional[str] (optional) An optional path for the metrics. Defaults to None. app_name : Optional[str] (optional) The application name. Defaults to None. metrics_path : Optional[str] (optional) The path from which the metrics will be served. Defaults to '/metrics'. Returns \u00b6 Application : The ASGI application async function bareasgi_prometheus . prometheus_view \u00b6 Summary \u00b6 Returns the prometheus stats async bareasgi_prometheus . prometheus_view ( _scope : Mapping[strAny] , _info : UnionMutableMapping[strAny], NoneType] , _matches : Mapping[strAny] , _content : AsyncIterable[bytes] ) -> Union[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]] Parameters \u00b6 _scope : Mapping[strAny] _info : UnionMutableMapping[strAny], NoneType] _matches : Mapping[strAny] _content : AsyncIterable[bytes] Returns \u00b6 Union[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]] : class HttpRequestMetric ( TimedMetric ) \u00b6 Summary \u00b6 Create an HTTP request metric bareasgi_prometheus.metrics . HttpRequestMetric ( host : str , app_name : str , scope : Scope , info : Info , matches : RouteMatches ) -> None Parameters \u00b6 host : str The host app_name : str The name of the application scope : Scope The ASGI scope info : Info The application defined info matches : RouteMatches The route matches property HttpRequestMetric . elapsed \u00b6 Summary \u00b6 The elapsed time elapsed -> float method HttpRequestMetric . on_enter \u00b6 Summary \u00b6 Called at the start of the context HttpRequestMetric . on_enter ( ) -> Any Returns \u00b6 Any : method HttpRequestMetric . on_exit \u00b6 Summary \u00b6 Called at the end of the context HttpRequestMetric . on_exit ( ) -> Any Returns \u00b6 Any : class PrometheusHttpRequestMetric ( HttpRequestMetric ) \u00b6 Summary \u00b6 Create an HTTP request metric bareasgi_prometheus.metrics . PrometheusHttpRequestMetric ( host : str , app_name : str , scope : Scope , info : Info , matches : RouteMatches ) -> None Parameters \u00b6 host : str The host app_name : str The name of the application scope : Scope The ASGI scope info : Info The application defined info matches : RouteMatches The route matches property PrometheusHttpRequestMetric . elapsed \u00b6 Summary \u00b6 The elapsed time elapsed -> float method PrometheusHttpRequestMetric . on_enter \u00b6 Summary \u00b6 Called at the start of the context PrometheusHttpRequestMetric . on_enter ( ) -> Any Returns \u00b6 Any : method PrometheusHttpRequestMetric . on_exit \u00b6 Summary \u00b6 Called at the end of the context PrometheusHttpRequestMetric . on_exit ( ) -> Any Returns \u00b6 Any : class PrometheusMiddleware \u00b6 Summary \u00b6 Prometheus middleware bareasgi_prometheus . PrometheusMiddleware ( * , metric_type : Type[HttpRequestMetric] , host : Optional[str] , app_name : Optional[str] ) -> None Parameters \u00b6 metric_type : Type[HttpRequestMetric] (optional) The metric type. Defaults to None. host : Optional[str] (optional) The host. Defaults to None. app_name : Optional[str] (optional) The application name. Defaults to None.","title":"bareasgi_prometheus"},{"location":"api/bareasgi_prometheus/#module-bareasgi_prometheus","text":"","title":"module bareasgi_prometheus"},{"location":"api/bareasgi_prometheus/#summary","text":"bareASGI prometheus middleware","title":"Summary"},{"location":"api/bareasgi_prometheus/#description","text":"Provides metrics for requests to a bareASGI web service.","title":"Description"},{"location":"api/bareasgi_prometheus/#function-bareasgi_prometheusadd_prometheus_middleware","text":"","title":"function bareasgi_prometheus.add_prometheus_middleware"},{"location":"api/bareasgi_prometheus/#summary_1","text":"Adds prometheus middleware as the first middleware. bareasgi_prometheus . add_prometheus_middleware ( app : Application , * , metric_type : Optional[Type[HttpRequestMetric]] , host : Optional[str] , app_name : Optional[str] , metrics_path : Optional[str] ) -> Application","title":"Summary"},{"location":"api/bareasgi_prometheus/#parameters","text":"app : Application The ASGI application metric_type : Optional[Type[HttpRequestMetric]] (optional) An optional custom request monitor. Defaults to None. host : Optional[str] (optional) An optional path for the metrics. Defaults to None. app_name : Optional[str] (optional) The application name. Defaults to None. metrics_path : Optional[str] (optional) The path from which the metrics will be served. Defaults to '/metrics'.","title":"Parameters"},{"location":"api/bareasgi_prometheus/#returns","text":"Application : The ASGI application","title":"Returns"},{"location":"api/bareasgi_prometheus/#async-function-bareasgi_prometheusprometheus_view","text":"","title":"async function bareasgi_prometheus.prometheus_view"},{"location":"api/bareasgi_prometheus/#summary_2","text":"Returns the prometheus stats async bareasgi_prometheus . prometheus_view ( _scope : Mapping[strAny] , _info : UnionMutableMapping[strAny], NoneType] , _matches : Mapping[strAny] , _content : AsyncIterable[bytes] ) -> Union[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]]","title":"Summary"},{"location":"api/bareasgi_prometheus/#parameters_1","text":"_scope : Mapping[strAny] _info : UnionMutableMapping[strAny], NoneType] _matches : Mapping[strAny] _content : AsyncIterable[bytes]","title":"Parameters"},{"location":"api/bareasgi_prometheus/#returns_1","text":"Union[intTuple[intUnionListTuple[bytes, bytes]], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeTuple[intUnionListTuple[bytes, bytes]], NoneTypeUnionAsyncIterable[bytes], NoneTypeUnionIterableTuple[strListTuple[bytes, bytes]]]], NoneType]]] :","title":"Returns"},{"location":"api/bareasgi_prometheus/#class-httprequestmetrictimedmetric","text":"","title":"class HttpRequestMetric(TimedMetric)"},{"location":"api/bareasgi_prometheus/#summary_3","text":"Create an HTTP request metric bareasgi_prometheus.metrics . HttpRequestMetric ( host : str , app_name : str , scope : Scope , info : Info , matches : RouteMatches ) -> None","title":"Summary"},{"location":"api/bareasgi_prometheus/#parameters_2","text":"host : str The host app_name : str The name of the application scope : Scope The ASGI scope info : Info The application defined info matches : RouteMatches The route matches","title":"Parameters"},{"location":"api/bareasgi_prometheus/#property-httprequestmetricelapsed","text":"","title":"property HttpRequestMetric.elapsed"},{"location":"api/bareasgi_prometheus/#summary_4","text":"The elapsed time elapsed -> float","title":"Summary"},{"location":"api/bareasgi_prometheus/#method-httprequestmetricon_enter","text":"","title":"method HttpRequestMetric.on_enter"},{"location":"api/bareasgi_prometheus/#summary_5","text":"Called at the start of the context HttpRequestMetric . on_enter ( ) -> Any","title":"Summary"},{"location":"api/bareasgi_prometheus/#returns_2","text":"Any :","title":"Returns"},{"location":"api/bareasgi_prometheus/#method-httprequestmetricon_exit","text":"","title":"method HttpRequestMetric.on_exit"},{"location":"api/bareasgi_prometheus/#summary_6","text":"Called at the end of the context HttpRequestMetric . on_exit ( ) -> Any","title":"Summary"},{"location":"api/bareasgi_prometheus/#returns_3","text":"Any :","title":"Returns"},{"location":"api/bareasgi_prometheus/#class-prometheushttprequestmetrichttprequestmetric","text":"","title":"class PrometheusHttpRequestMetric(HttpRequestMetric)"},{"location":"api/bareasgi_prometheus/#summary_7","text":"Create an HTTP request metric bareasgi_prometheus.metrics . PrometheusHttpRequestMetric ( host : str , app_name : str , scope : Scope , info : Info , matches : RouteMatches ) -> None","title":"Summary"},{"location":"api/bareasgi_prometheus/#parameters_3","text":"host : str The host app_name : str The name of the application scope : Scope The ASGI scope info : Info The application defined info matches : RouteMatches The route matches","title":"Parameters"},{"location":"api/bareasgi_prometheus/#property-prometheushttprequestmetricelapsed","text":"","title":"property PrometheusHttpRequestMetric.elapsed"},{"location":"api/bareasgi_prometheus/#summary_8","text":"The elapsed time elapsed -> float","title":"Summary"},{"location":"api/bareasgi_prometheus/#method-prometheushttprequestmetricon_enter","text":"","title":"method PrometheusHttpRequestMetric.on_enter"},{"location":"api/bareasgi_prometheus/#summary_9","text":"Called at the start of the context PrometheusHttpRequestMetric . on_enter ( ) -> Any","title":"Summary"},{"location":"api/bareasgi_prometheus/#returns_4","text":"Any :","title":"Returns"},{"location":"api/bareasgi_prometheus/#method-prometheushttprequestmetricon_exit","text":"","title":"method PrometheusHttpRequestMetric.on_exit"},{"location":"api/bareasgi_prometheus/#summary_10","text":"Called at the end of the context PrometheusHttpRequestMetric . on_exit ( ) -> Any","title":"Summary"},{"location":"api/bareasgi_prometheus/#returns_5","text":"Any :","title":"Returns"},{"location":"api/bareasgi_prometheus/#class-prometheusmiddleware","text":"","title":"class PrometheusMiddleware"},{"location":"api/bareasgi_prometheus/#summary_11","text":"Prometheus middleware bareasgi_prometheus . PrometheusMiddleware ( * , metric_type : Type[HttpRequestMetric] , host : Optional[str] , app_name : Optional[str] ) -> None","title":"Summary"},{"location":"api/bareasgi_prometheus/#parameters_4","text":"metric_type : Type[HttpRequestMetric] (optional) The metric type. Defaults to None. host : Optional[str] (optional) The host. Defaults to None. app_name : Optional[str] (optional) The application name. Defaults to None.","title":"Parameters"},{"location":"user-guide/installation/","text":"Installation \u00b6 Install from the pie store $ pip install bareASGI-prometheus","title":"Installation"},{"location":"user-guide/installation/#installation","text":"Install from the pie store $ pip install bareASGI-prometheus","title":"Installation"},{"location":"user-guide/usage/","text":"Usage \u00b6 The middleware can either be configured manually or with a helper. Manual Configuration \u00b6 from bareasgi import Application from bareasgi_prometheus import PrometheusMiddleware , prometheus_view ... prometheus_middleware = PrometheusMiddleware () app = Application ( middlewares = [ prometheus_middleware ]) app . http_router . add ({ 'GET' }, '/metrics' , prometheus_view ) Helper Configuration \u00b6 from bareasgi import Application from bareasgi_prometheus import add_prometheus_middleware ... app = Application () add_prometheus_middleware ( app )","title":"Usage"},{"location":"user-guide/usage/#usage","text":"The middleware can either be configured manually or with a helper.","title":"Usage"},{"location":"user-guide/usage/#manual-configuration","text":"from bareasgi import Application from bareasgi_prometheus import PrometheusMiddleware , prometheus_view ... prometheus_middleware = PrometheusMiddleware () app = Application ( middlewares = [ prometheus_middleware ]) app . http_router . add ({ 'GET' }, '/metrics' , prometheus_view )","title":"Manual Configuration"},{"location":"user-guide/usage/#helper-configuration","text":"from bareasgi import Application from bareasgi_prometheus import add_prometheus_middleware ... app = Application () add_prometheus_middleware ( app )","title":"Helper Configuration"}]}